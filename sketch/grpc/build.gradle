plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
}

repositories {
    mavenCentral()
}

def grpcVersion = '1.49.0' // Puedes usar una versión más reciente
def protobufVersion = '3.21.1' // Debe coincidir

dependencies {
    // Dependencias de gRPC
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    
    // Soporte para anotaciones como @Generated
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    
    // Dependencias de la GUI (Swing)
    // No son necesarias si ya están en el JDK
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}

// Apuntar a las carpetas fuente
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'src/main/java'
        }
        proto {
            srcDir 'src/main/proto'
        }
    }
}

application {
    // Define por defecto el servidor; usaremos tareas separadas para cliente/servidor
    mainClass = 'grpcapp.ServidorGPRC'
}

// Tareas convenientes para ejecutar servidor y cliente
tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Ejecuta el servidor gRPC'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'grpcapp.ServidorGPRC'
}

tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Ejecuta el cliente gRPC'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'grpcapp.ClienteGPRC'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Evitar incluir .proto como recursos y manejar duplicados
tasks.named('processResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    filesMatching('**/*.proto') { exclude() }
}